Extra credit:

Prevent rematches between players.
 - use the winner loser columns in the matches table as a composite primary key
 - have python check the database before appending a pair to the list. If the pair, either way, already exists, simply 	
   match with the next player
 - how will python check?
 	-It will have to query the matches table. (SELECT * FROM MATCHES)
 	-It will need to take each player from playerStandings(), one at a time, and try to make a match based on the history of matches.
 	-You can probably use the pop() function on a reversed playerStandings() list. 
 	-Google what happens or what you should do when the program tries to enter a duplicate composite primary key into the database





Don’t assume an even number of players. If there is an odd number of players, assign one player a “bye” (skipped round). A bye counts as a free win. A player should not receive more than one bye in a tournament.

Support games where a draw (tied game) is possible. This will require changing the arguments to reportMatch.

When two players have the same number of wins, rank them according to OMW (Opponent Match Wins), the total number of wins by players they have played against.

Support more than one tournament in the database, so matches do not have to be deleted between tournaments. This will require distinguishing between “a registered player” and “a player who has entered in tournament #123”, so it will require changes to the database schema.
    		
You may refer to outside resources to devise your pairing algorithm. Wizards of the Coast has prepared simple instructions, and more details can be found in resources linked to in the reference section of Wikipedia's article on Swiss tournaments.
